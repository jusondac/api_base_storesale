c
response.body
response.update
response
c
@storefront.save!
c
@storefront.save!
c
@storefront.save!
@storefront
c
response
c
response.body
response
c
miss_user_attributes
c
response.body
response
c
Faker::Address.city
Faker::Address.full_address
Faker::Address.address
Faker::Address
ap Storefront
@storefront.save!
@storefront.save
@storefront
c
@storefront
c
@storefront
c
@storefront
c
Dc
product
product.name
product.id
product = JSON.parse(response.body)
response.body
response
c
response
c
response
r
r=post "/api/v1/products", params: valid_attributes.to_json, headers: headers
post "/api/v1/products", params: valid_attributes.to_json, headers: headers
valid_attributes.to_json
valid_attributes
invalid_parameters
invalid_parameter
c
response
c
storefront.id
storefront
c
response
product
c
response.body
response
c
response.body
response
c
response.body
response
c
product
c
PaymentService.create_payment(invoice.id, order.total_price, "credit_card")
invoice = Invoice.create!(order_id: order.id, status: status, total_amount: order.total_price, due_date: due_date || 7.days.from_now)
PaymentService.create_payment(invoice.id, order.total_price, "credit_card")
Invoice.create!(order_id: order.id, status: status, total_amount: order.total_price, due_date: due_date || 7.days.from_now)
      )
        due_date: due_date || 7.days.from_now
        total_amount: order.total_price,
        status: status,
        order_id: order.id,
invoice = Invoice.create!(
c
InvoiceService.create_invoice(order)
c
InvoiceService.create_invoice(order)
c
OrderCreator.create_order(customer: customer, items: items)
c
PaymentService.create_payment(invoice.id, order.total_price, "credit_card")
c
PaymentService.create_payment(invoice.id, order.total_price, "credit_card")
PaymentService.create_payment(invoice, order.total_price, "credit_card")
c
PaymentService.create_payment(invoice)
c
InvoiceService.create_invoice(order)
c
ActionController::Base.transaction
ActionController::Base
InvoiceService.create_invoice(order)
c
OrderCreator.create_order(customer: customer, items: items)
c
InvoiceService.create_invoice(order)
c
OrderCreator.create_order(customer: customer, items: items)
c
JSON.parse(response.body)["product_id]
JSON.parse(response.body)["product_id"]
JSON.parse(response.body)
JSON.parse(response.body)['produt_id']
product.id
product
response.body
c
x
restock
restock.save
restock
c
response.body
response
c
InvoiceService.update_status(invoice.id, "paid")
payment = _
Payment.create!( invoice_id: invoice.id, amount: amount, payment_method: method, payment_date: Time.current, status: "successful" ) 
c
Payment.create!( invoice_id: invoice.id, amount: amount, payment_method: method, payment_date: Time.current, status: "completed" )
      )
        status: "completed"
        payment_date: Time.current,
        payment_method: method,
        amount: amount,
        invoice_id: invoice.id,
payment = Payment.create!(
invoice
c
cc
c
   13:     )
   12:       params[:payment_method]
   11:       params[:amount],
   10:       params[:invoice_id],
 PaymentService.create_payment(
c
qc
payments
peyments
c
x
invoice
c
Stock.all
stock
product = Product.find(items.first[:product_id])
items
c
response
c
response
c
Stock.all
c
Stock.all
c
Stock.all
Order.all
order
Order
c
Product.find(items.first[:product_id]).stock
Product.find(items.first[:product_id])
Product.find(_
items.first[:product_id]
items.first
items
stock
c
product.stock
product = Product.find(items.first[:product_id])
product = Product.find(item.first[:product_id])
product = Product.find(item[:product_id])
product.find(item[:product_id])
c
items
item
c
items.first[:quantity]
items.first
items
c
items
order_params
items
c
items
c
params
c
items
item
c
stock
c
product
c
product
c
@product
c
@product
c
stock = Stock.create(product: product, quantity: params[:quantity])
stock = create(product: product, quantity: params[:quantity])
params
product = Product.create(params)
product
c
response
params
response
request.body
request
response
ap response
ap _
response
c
response.body
response
expect(response).to have_http_status(:unprocessable_entity)
c
JSON.parse(response.body)
response
responce
expect(response).to have_http_status(:unprocessable_entity)
have_http_status(:unprocessable_entity)
response
c
order_params[:order_items]
order_params[]:order_items
order_params
c
order_params[:order_items].nil?
order_params[:order_items].empty?
order_params[:order_items].empty??
order_params[:order_items].nil?
order_params[:order_items]
order_params
c
order_params[:order_items][1]
order_params[:order_items][0]
