c
s
params_method
controller_class
controller_name
c
controller_class.method(params_method).source_location
controller_class.method(params_method)
controller_class
params_method
params
params_method
controller_class
controller_class.class.method(params_method).source_location
  source_location = controller.class.method(params_method).source_location || "undefined"
params_method     = "#{controller_name}_params".to_sym
controller_name   = controller.split('::').last.gsub('sController', '').underscore
source_location
controller_name
c
source_location
controller_name
c
controller_name
c
source_location.nil?
source_location = nil
source_location
exit
source = controller.class.method(params_method).source_location || "undefined"
source = controller.class.method(params_method).source_location
source = controller.class.method(params_method).source_location unless "nil"
controller.class.method(params_method).source_location unless "undefined"
controller.class.method(params_method).source_location
controller_class = controller.constantize.new
controller_class
controller
params_method
source_location = controller.method(params_method).source_location
params_method = "#{controller_name}_params".to_sym
controller_name = controller.split('::').last.gsub('Controller', '').underscore
method_params = controller.split('::').last.gsub('Controller', '').underscore+"_params".to_sym
method_params.to_sym
method_params = controller.split('::').last.gsub('Controller', '').underscore+"_params"
controller.split('::').last.gsub('Controller', '').underscore+"_params".to_s
controller.split('::').last.gsub('Controller', '').underscore+"_params".to_s.to_sym
controller.split('::').last.gsub('Controller', '').underscore+"_params".class
controller.split('::').last.gsub('Controller', '').underscore+"_params"
controller.split('::').last.gsub('Controller', '').underscore+"_params".to_sym
controller.split('::').last.gsub('Controller', '').underscore+"_params"
controller.split('::').last.gsub('Controller', '').underscore
controller.split('::').last.gsub('Controller', '')
sourcecont controller.split('::').last.gsub('Controller', '').underscore
end
  underscored.sub(/^_/, '')
  # Remove the leading underscore if it exists
  underscored = class_name.gsub(/([A-Z])/, '_\1').downcase
  # Insert an underscore before each uppercase letter, except the first one
def convert_to_snake_case(class_name)
require 'active_support/inflector'
sourcecont controller.split('::').last.gsub('Controller', '').underscore
controller.split('::').last.gsub('Controller', '')
controller.split('::').lastgsub('Controller', '')
controller.split('::').last
controller.split('::')
controller.gsub(/^:[A-Z]/,'')
controller.gsub(/^[A-Z]/,'')
controller.gsub(/^:.+/,'')
controller.gsub(/^:/,'')
con = controller.constantize.new
controller
c
c = controller.constantize.new
controller
c
exit
strong_params
controller_instance.send(strong_params_method)
controller_instance.send(strong_params_method, sample_params)
controller_instance = controller_class.new
permitted = controller_instance.send(strong_params_method, sample_params)
controller_instance = controller_class.new
permitted = controller_instance.send(strong_params_method, sample_params)
sample_params = ActionController::Parameters.new({ example: { key: "value" } })
strong_params_method = "#{action}_params"
action = "product"
controller_class.private_instance_methods
controller_class.private_instance_method
controller_class
  c
action
strong_params_method
controller_class.private_instance_methods
controller_class.class
controller_class.action_methods
controller_class
c
route.defaults[:controller].camelize.constantize
route.defaults[:controller].camelize
route.defaults[:controller]
controller_action
c
args
c
price = cost * (1 + storefront.margin)
cost = Faker::Commerce.price(range: 10.0..1000.0)
Faker::Commerce.price(range: 10.0..1000.0)
cost
price = cost * (1 + storefront.margin)
Faker::Commerce.price(range: 10.0..1000.0)
Faker
cost = Faker::COmmerce.price
c
JSON.parse(response.body)
response
clv
cltv
c
invoice
c
invoice
c
invoice
order
invoice
c
invoice
user.role
user
invoice
user
invoice
c
params
c
invoice_id
invoice
invoice = Invoice.find(invoice_id)
c
@payments
@payment
c
customer
c
response
c
OrderCreator.create_order(customer: customer, items: items, shipping: shipping)
c
OrderCreator.create_order(customer: customer, items: items, shipping: shipping)
c
@order
c
User.find(2)
order_params
customer = Customer.find(order_params[:customer_id])
items
c
shipping
shippinc
create_invoice(order, shipping)
shipping
c
shipping
create_invoice(order, shipping)
c
create_invoice(order, shipping)
c
response['errors']
response['error']
response
c
response
c
params
c
ap json_response['sales_by_day']
json_response
c
ap json_response['sales_by_day']
json_response['sales_by_day']
json_response[sales_by_day]
json_response
 c
ap json_response
ap _
json_response
c
@current_user.storefronts
@current_user.storefronts.all
@current_user.storefronts
@current_user.store
@current_user
c
store.first
store = @current_user.storefronts
storefront = _
@current_user.storefronts
@current_user
c
customer
product
product = Product.find(items.first[:product_id])
items.first[:product_id]
items.first
items.first["product_id"]
product = Product.find(items.first["product_id"])
items.first
product = Product.find(items.first['product_id'])
items
product = Product.find(product[:product_id])
c
product.storefront.user = current_user
product.storefront.user = current_ud
product.storefront.user
product.storefront.user.email
product.storefront.user
product.storefront
product = Product.find(product[:product_id])
product = _
Product.find(product[:product_id])
product[:product_id]
product.product_id
product = items.first
Product.find(items.first)
Product.find(items.first.product_id)
items
Product.find(items.first.product_id)
Product.find(items.first)
items.first
items
order
c
response.body
response.update
response
c
@storefront.save!
c
@storefront.save!
c
@storefront.save!
@storefront
c
response
c
response.body
response
c
miss_user_attributes
c
response.body
response
c
Faker::Address.city
Faker::Address.full_address
Faker::Address.address
